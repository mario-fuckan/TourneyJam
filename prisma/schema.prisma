// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model AuthUser {
  id                String   @id @unique
  username          String   @unique
  email             String   @unique
  profile_picture   String
  prizeWon          Int      @default(0)
  role              Role     @default(user)
  socials           Json?    @default("[]")
  join_date         DateTime @default(now())
  xp                Int      @default(0)
  level             Int      @default(0)
  badges            Badge[]  @default([])
  wins              Int      @default(0)
  tournamentsPlayed Int      @default(0)

  auth_session      AuthSession[]
  auth_key          AuthKey[]
  TournamentPlayers TournamentPlayers[]
  Tournament        Tournament[]
  Game              Game[]

  @@map("auth_user")
}

enum Role {
  user
  admin
  company
}

enum Badge {
  verified
  admin
  company
}

model Game {
  id               Int          @id @unique @default(autoincrement())
  game_cover       String
  game_background  String?
  game_showcase    String?
  game_name        String
  game_description String
  game_tags        String[]
  game_website     String?
  Tournament       Tournament[]
  authUser         AuthUser?    @relation(fields: [authUserId], references: [id])
  authUserId       String?
}

model Tournament {
  id                Int                 @id @unique @default(autoincrement())
  cover_image       String              @default("tournament.png")
  title             String
  startOn           DateTime
  password          String?
  description       String
  game              Game?               @relation(fields: [gameId], references: [id])
  prize             Int
  max_slots         Int
  tags              String[]            @default([])
  type              Type
  authUser          AuthUser            @relation(fields: [authUserId], references: [id])
  status            TournamentStatus    @default(scheduled)
  TournamentPlayers TournamentPlayers[]
  authUserId        String
  gameId            Int
  creatorStream     String?
  bracket           Json?
}

enum TournamentStatus {
  active
  ended
  scheduled
}

enum Type {
  open
  passwordProtected
}

model TournamentPlayers {
  id           Int        @id @unique @default(autoincrement())
  Tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId Int
  AuthUser     AuthUser   @relation(fields: [authUserId], references: [id])
  authUserId   String
}

model Tag {
  id  Int    @id @unique @default(autoincrement())
  tag String @unique
}

model AuthSession {
  id             String   @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  auth_user      AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_session")
}

model AuthKey {
  id              String   @id @unique
  hashed_password String?
  user_id         String
  primary_key     Boolean
  expires         BigInt?
  auth_user       AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_key")
}
